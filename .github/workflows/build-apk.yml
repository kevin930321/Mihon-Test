# .github/workflows/build-apk.yml

name: Build Debug APK

# 這個 workflow 的觸發條件
on:
  # 允許你手動從 GitHub Actions 頁面觸發此 workflow
  workflow_dispatch:

  # (可選) 當你 push commit 到 main 或 master 分支時自動觸發
  push:
    branches:
      - main
      - master

jobs:
  build:
    # 使用最新的 Ubuntu 虛擬機來執行
    runs-on: ubuntu-latest

    steps:
      # 步驟 1: Checkout 你的程式碼
      # 這個動作會將你儲存庫的程式碼下載到虛擬機中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 設定 Java 環境
      # Android 建置需要 JDK (Java Development Kit)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 步驟 3: 設定 Gradle 快取 (可選，但強烈建議)
      # 快取可以大幅加速未來的建置過程
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/libs.versions.toml') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 步驟 4: 賦予 gradlew 執行權限
      # 這是確保 Gradle Wrapper 腳本可以被執行的好習慣
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      # 步驟 5: 執行 Gradle 建置 debug APK 的指令
      # 'assembleDebug' 會建置一個未簽章的 debug 版本 APK，最適合測試
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # 步驟 6: 上傳建置好的 APK 作為 "artifact"
      # "artifact" 是 workflow 產出的檔案，你可以在 workflow 結束後下載它
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          # 這個是你下載時看到的 artifact 名稱
          name: Mihon-Debug-APK
          # 這是 debug APK 在虛擬機中的標準路徑
          path: app/build/outputs/apk/debug/app-debug.apk
