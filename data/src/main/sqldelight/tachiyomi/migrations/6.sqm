DROP INDEX IF EXISTS chapters_manga_id_index;
DROP INDEX IF EXISTS chapters_unread_by_manga_index;
DROP INDEX IF EXISTS history_history_chapter_id_index;
DROP INDEX IF EXISTS library_favorite_index;
DROP INDEX IF EXISTS mangas_url_index;

DROP VIEW IF EXISTS historyView;
DROP VIEW IF EXISTS libraryView;
DROP VIEW IF EXISTS updatesView;

ALTER TABLE mangas RENAME TO manga_temp;
CREATE TABLE mangas(
    id INTEGER NOT NULL PRIMARY KEY,
    source INTEGER NOT NULL,
    url TEXT NOT NULL,
    artist TEXT,
    author TEXT,
    description TEXT,
    genre TEXT AS List<String>,
    title TEXT NOT NULL,
    status INTEGER NOT NULL,
    thumbnail_url TEXT,
    favorite INTEGER AS Boolean NOT NULL,
    last_update INTEGER,
    next_update INTEGER,
    initialized INTEGER AS Boolean NOT NULL,
    viewer INTEGER NOT NULL,
    chapter_flags INTEGER NOT NULL,
    cover_last_modified INTEGER NOT NULL,
    date_added INTEGER NOT NULL,
    update_strategy INTEGER AS UpdateStrategy NOT NULL DEFAULT 0,
    calculate_interval INTEGER DEFAULT 0 NOT NULL,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    favorite_modified_at INTEGER,
    version INTEGER NOT NULL DEFAULT 0,
    is_syncing INTEGER NOT NULL DEFAULT 0,
    UNIQUE(source, url) ON CONFLICT IGNORE
);
INSERT INTO mangas
SELECT
    _id, source, url, artist, author, description, genre, title, status, thumbnail_url, favorite,
    last_update, next_update, initialized, viewer, chapter_flags, cover_last_modified, date_added,
    update_strategy, calculate_interval, last_modified_at, favorite_modified_at, version, is_syncing
FROM manga_temp;

ALTER TABLE categories RENAME TO categories_temp;
CREATE TABLE categories(
    id INTEGER NOT NULL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    `order` INTEGER NOT NULL UNIQUE,
    flags INTEGER NOT NULL
);
INSERT INTO categories
SELECT _id, name, (RANK() OVER (ORDER BY sort)) - 2, flags
FROM categories_temp;

ALTER TABLE chapters RENAME TO chapters_temp;
CREATE TABLE chapters(
    id INTEGER NOT NULL PRIMARY KEY,
    manga_id INTEGER NOT NULL,
    url TEXT NOT NULL,
    name TEXT NOT NULL,
    scanlator TEXT,
    read INTEGER AS Boolean NOT NULL,
    bookmark INTEGER AS Boolean NOT NULL,
    last_page_read INTEGER NOT NULL,
    chapter_number REAL NOT NULL,
    source_order INTEGER NOT NULL,
    date_fetch INTEGER NOT NULL,
    date_upload INTEGER NOT NULL,
    last_modified_at INTEGER NOT NULL DEFAULT 0,
    version INTEGER NOT NULL DEFAULT 0,
    is_syncing INTEGER NOT NULL DEFAULT 0,
    UNIQUE(manga_id, url) ON CONFLICT IGNORE,
    FOREIGN KEY(manga_id) REFERENCES mangas(id)
    ON DELETE CASCADE
);
INSERT INTO chapters
SELECT
    _id, manga_id, url, name, scanlator, read, bookmark, last_page_read, chapter_number, source_order,
    date_fetch, date_upload, last_modified_at, version, is_syncing
FROM chapters_temp;

ALTER TABLE excluded_scanlators RENAME TO excluded_scanlators_temp;
CREATE TABLE excluded_scanlators(
    manga_id INTEGER NOT NULL,
    scanlator TEXT NOT NULL,
    UNIQUE(manga_id, scanlator) ON CONFLICT IGNORE,
    FOREIGN KEY(manga_id) REFERENCES mangas(id)
    ON DELETE CASCADE
);
INSERT INTO excluded_scanlators
SELECT manga_id, scanlator
FROM excluded_scanlators_temp;

ALTER TABLE history RENAME TO history_temp;
CREATE TABLE history(
    id INTEGER NOT NULL PRIMARY KEY,
    chapter_id INTEGER NOT NULL UNIQUE,
    last_read INTEGER AS Date,
    time_read INTEGER NOT NULL,
    FOREIGN KEY(chapter_id) REFERENCES chapters (id)
    ON DELETE CASCADE
);
INSERT INTO history
SELECT history_id, history_chapter_id, history_last_read, history_time_read
FROM history_temp;

ALTER TABLE mangas_categories RENAME TO mangas_categories_temp;
CREATE TABLE mangas_categories(
    manga_id INTEGER NOT NULL,
    category_id INTEGER NOT NULL,
    UNIQUE(manga_id, category_id) ON CONFLICT IGNORE,
    FOREIGN KEY(category_id) REFERENCES categories(id)
    ON DELETE CASCADE,
    FOREIGN KEY(manga_id) REFERENCES mangas(id)
    ON DELETE CASCADE
);
INSERT INTO mangas_categories
SELECT manga_id, category_id
FROM mangas_categories_temp;

ALTER TABLE manga_sync RENAME TO manga_sync_temp;
CREATE TABLE manga_sync(
    id INTEGER NOT NULL PRIMARY KEY,
    manga_id INTEGER NOT NULL,
    sync_id INTEGER NOT NULL,
    remote_id INTEGER NOT NULL,
    library_id INTEGER,
    title TEXT NOT NULL,
    last_chapter_read REAL NOT NULL,
    total_chapters INTEGER NOT NULL,
    status INTEGER NOT NULL,
    score REAL NOT NULL,
    remote_url TEXT NOT NULL,
    start_date INTEGER NOT NULL,
    finish_date INTEGER NOT NULL,
    UNIQUE(manga_id, sync_id) ON CONFLICT IGNORE,
    FOREIGN KEY(manga_id) REFERENCES mangas(id)
    ON DELETE CASCADE
);
INSERT INTO manga_sync
SELECT
    _id, manga_id, sync_id, remote_id, library_id, title, last_chapter_read, total_chapters, status,
    score, remote_url, start_date, finish_date
FROM manga_sync_temp;

CREATE INDEX chapters_manga_id_index ON chapters(manga_id);
CREATE INDEX excluded_scanlators_manga_id_index ON excluded_scanlators(manga_id);
CREATE INDEX history_chapter_id_index ON history(chapter_id);
CREATE INDEX manga_sync_manga_id_index ON manga_sync(manga_id);
CREATE INDEX library_favorite_index ON mangas(favorite) WHERE favorite = 1;
CREATE INDEX mangas_url_index ON mangas(url);
CREATE INDEX mangas_categories_manga_id_index ON mangas_categories(manga_id);
CREATE INDEX mangas_categories_category_id_index ON mangas_categories(category_id);

CREATE VIEW historyView AS
SELECT
    history.id AS id,
    mangas.id AS mangaId,
    chapters.id AS chapterId,
    mangas.title,
    mangas.thumbnail_url AS thumbnailUrl,
    mangas.source,
    mangas.favorite,
    mangas.cover_last_modified,
    chapters.chapter_number AS chapterNumber,
    history.last_read AS readAt,
    history.time_read AS readDuration,
    max_last_read.last_read AS maxReadAt,
    max_last_read.chapter_id AS maxReadAtChapterId
FROM mangas
JOIN chapters
ON mangas.id = chapters.manga_id
JOIN history
ON chapters.id = history.chapter_id
JOIN (
    SELECT chapters.manga_id,chapters.id AS chapter_id, MAX(history.last_read) AS last_read
    FROM chapters JOIN history
    ON chapters.id = history.chapter_id
    GROUP BY chapters.manga_id
) AS max_last_read;

CREATE VIEW libraryView AS
SELECT
    M.*,
    coalesce(C.total, 0) AS totalCount,
    coalesce(C.readCount, 0) AS readCount,
    coalesce(C.latestUpload, 0) AS latestUpload,
    coalesce(C.fetchedAt, 0) AS chapterFetchedAt,
    coalesce(C.lastRead, 0) AS lastRead,
    coalesce(C.bookmarkCount, 0) AS bookmarkCount,
    coalesce(MC.category_id, 0) AS category
FROM mangas M
LEFT JOIN(
    SELECT
        chapters.manga_id,
        count(*) AS total,
        sum(read) AS readCount,
        coalesce(max(chapters.date_upload), 0) AS latestUpload,
        coalesce(max(history.last_read), 0) AS lastRead,
        coalesce(max(chapters.date_fetch), 0) AS fetchedAt,
        sum(chapters.bookmark) AS bookmarkCount
    FROM chapters
    LEFT JOIN excluded_scanlators
    ON chapters.manga_id = excluded_scanlators.manga_id
    AND chapters.scanlator = excluded_scanlators.scanlator
    LEFT JOIN history
    ON chapters.id = history.chapter_id
    WHERE excluded_scanlators.scanlator IS NULL
    GROUP BY chapters.manga_id
) AS C
ON M.id = C.manga_id
LEFT JOIN mangas_categories AS MC
ON MC.manga_id = M.id
WHERE M.favorite = 1;

CREATE VIEW updatesView AS
SELECT
    mangas.id AS mangaId,
    mangas.title AS mangaTitle,
    chapters.id AS chapterId,
    chapters.name AS chapterName,
    chapters.scanlator,
    chapters.read,
    chapters.bookmark,
    chapters.last_page_read,
    mangas.source,
    mangas.favorite,
    mangas.thumbnail_url AS thumbnailUrl,
    mangas.cover_last_modified AS coverLastModified,
    chapters.date_upload AS dateUpload,
    chapters.date_fetch AS datefetch
FROM mangas JOIN chapters
ON mangas.id = chapters.manga_id
WHERE favorite = 1
AND date_fetch > date_added
ORDER BY date_fetch DESC;

DROP TABLE IF EXISTS manga_temp;
DROP TABLE IF EXISTS categories_temp;
DROP TABLE IF EXISTS chapters_temp;
DROP TABLE IF EXISTS history_temp;
DROP TABLE IF EXISTS mangas_categories_temp;
DROP TABLE IF EXISTS manga_sync_temp;
